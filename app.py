#!/usr/bin/env python
# encoding: utf-8

# Capgemini (Brazil) - www.capgemini.com/br-pt
# "People matter, results count"

import streamlit as st
import logging
import time

from src.utils import setup_logger, load_csv, df_to_bytes
from src import operations


setup_logger(__name__)


def main() -> None:
    st.set_page_config(page_title="♤ Capgemini: I&D Tech Talks", page_icon="♠")

    st.sidebar.write('**INPUT**')

    input_files = st.sidebar.file_uploader(
        "Attendance list files",
        accept_multiple_files=True,
        type=("csv",),
        help="CSV files generated by Microsoft Teams meetings"
    )
    ignore_inactive_users = st.sidebar.checkbox(
        "Ignore inactive users",
        value=True,
        help="Ignore users not present at the time the attendance list was generated"
    )

    st.sidebar.markdown("""---""")
    st.sidebar.write('**PROCESSES**')
    operation_type = st.sidebar.selectbox("Operation type", operations.TYPES)

    if operation_type == operations.ATTENDANCE_LIST_DRAW_VOUCHER:
        num_vouchers = st.sidebar.slider("Number of vouchers", min_value=1, max_value=10, value=2)
        allow_duplicates = st.sidebar.checkbox("Allow duplicates winners", value=False)

    if st.sidebar.button("Run") and input_files is not None:
        df_list = load_csv(input_files)

        if df_list:
            logging.debug(f"Executing operation '{operation_type}'...")

            if operation_type == operations.ATTENDANCE_LIST_COUNT:
                count = operations.get_attendance_list_count(
                    df_list=df_list,
                    ignore_inactive_users=ignore_inactive_users
                )
                st.markdown(
                    f"Following the attendance list count: <mark style='background-color: lightblue'>{count}</mark>",
                    unsafe_allow_html=True
                )
            elif operation_type == operations.ATTENDANCE_LIST:
                df = operations.get_attendance_list(df_list=df_list, ignore_inactive_users=ignore_inactive_users)
                st.write("Attendance list:")
                st.dataframe(df, use_container_width=True)
                csv = df_to_bytes(df)

                st.download_button(
                    label="Download",
                    data=csv,
                    file_name="attendance_list.csv",
                    mime="text/csv",
                )
            elif operation_type == operations.ATTENDANCE_LIST_DRAW_VOUCHER:
                # Displaying progress bar on screen:
                pbar = st.progress(0)

                for percent_complete in range(100):
                    time.sleep(0.1)
                    pbar.progress(percent_complete + 1)

                pbar.empty()

                # Fetching and displaying the list of winners on the screen:
                df = operations.giveaway_vouchers(
                    df_list=df_list,
                    number=num_vouchers,
                    allow_duplicates=allow_duplicates,
                    ignore_inactive_users=ignore_inactive_users
                )
                st.write("List of winners:")
                st.dataframe(df, use_container_width=True)
                csv = df_to_bytes(df)

                st.download_button(
                    label="Download",
                    data=csv,
                    file_name="vouchers_winners.csv",
                    mime="text/csv",
                )


if __name__ == '__main__':
    main()
